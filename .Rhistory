library(devtools)
library(readr)
test_data <- read_csv("bronch test data.csv")
test_data <- read_csv("bronch test data.csv")
library(tidyr)
demo_data <- test_data
library(dplyr)
demo_data <-
test_data %>%
select(VISIT_KEY, PAT_KEY, METRIC = ALBUTEROL_ED_IND, PRIMARY_LANG, RACE, PAYER_TYPE)
#Gather
demo_pivot <-
demo_data %>%
gather(demo_group, demo_value, -VISIT_KEY, -PAT_KEY, -METRIC)
View(demo_pivot)
library(ggplot2)
ggplot(data = filter(demo_pivot, demo_group == "RACE"))
filter(demo_pivot, demo_group == "RACE")
ggplot(data = filter(demo_pivot, demo_group == "RACE"), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean") +
labs(x = "RACE")
make_demo_plot <- function(demo){
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean") +
labs(x = demo)
}
make_demo_plot("RACE")
make_demo_plot("PRIMARY_LANG")
make_demo_plot("PAYER_TYPE")
library(purrr)
demo_plots <- map(demo_vars, make_demo_plot)
#Define the demos here by their SQL columns names
demo_vars <- c("RACE", "PAYER_TYPE", "PRIMARY_LANG")
demo_plots <- map(demo_vars, make_demo_plot)
demo_plots
make_demo_plot <- function(demo){
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0") +
labs(x = demo)
}
demo_plots <- map(demo_vars, make_demo_plot)
demo_plots
library(ggthemes)
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0") +
theme_few() +
labs(x = demo)
make_demo_plot <- function(demo){
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0") +
theme_few() +
labs(x = demo)
}
demo_plots <- map(demo_vars, make_demo_plot)
demo_plots
METRIC <- "ALBUTEROL_IND"
make_demo_plot <- function(demo){
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0") +
theme_few() +
labs(x = demo, title = paste(METRIC, "stratified by", demo))
}
demo_plots <- map(demo_vars, make_demo_plot)
demo_plots
make_demo_plot <- function(demo){
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0") +
geom_text(aes(label = mean(METRIC)))
theme_few() +
labs(x = demo, y = "AVERAGE", title = paste(METRIC, "stratified by", demo))
}
demo_plots <- map(demo_vars, make_demo_plot)
demo_plots
make_demo_plot <- function(demo){
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0") +
geom_text(aes(label = mean(METRIC))) +
theme_few() +
labs(x = demo, y = "AVERAGE", title = paste(METRIC, "stratified by", demo))
}
demo_plots <- map(demo_vars, make_demo_plot)
demo_plots
make_demo_plot <- function(demo){
ggplot(data = filter(demo_pivot, demo_group == demo), aes(x = demo_value, y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0") +
theme_few() +
labs(x = demo, y = "AVERAGE", title = paste(METRIC, "stratified by", demo))
}
library(usethis)
library(devtools)
usethis::create_package("demographics")
usethis::create_package("demographics")
usethis::create_package("package/demographics")
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_description()
usethis::edit_description()
devtools::check()
devtools::check()
devtools::check()
document()
devtools::install_github("maduc/demographics", host = "github.research.chop.edu/api/v3")
devtools::install_github("maduc\demographics", host = "github.research.chop.edu\apiv3")
devtools::install_github("maduc\demographics", host = "github.research.chop.edu\api\v3")
devtools::install_github("maduc/demographics", host = "github.research.chop.edu/api/v3")
install.packages("githubinstall")
library(devtools)
document()
document()
document()
load_all()
get_demo_data("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
qmr_dev <-  dbConnect(odbc::odbc(), dsn = "QMR_DEV", believeNRows = FALSE,
bigint = "integer")
library(odbc)
qmr_dev <-  dbConnect(odbc::odbc(), dsn = "QMR_DEV", believeNRows = FALSE,
bigint = "integer")
get_demo_data("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE) %>% head(10)
libray(dplyr])
libray(dplyr)
library(dplyr)
get_demo_data("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE) %>% head(10)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE %>% head(10)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
load_all()
test_data <- get_demo_data("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
View(test_data)
load_all()
test_data <- get_demo_data("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
test_data <- get_demo_data("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
View(test_data)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
library(demographics)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_dev, datamart = TRUE)
qmr_con <- dbConnect(odbc::odbc(),
dsn = "QMR_DEV",
bigint = "integer")
library(odbc)
qmr_con <- dbConnect(odbc::odbc(),
dsn = "QMR_DEV",
bigint = "integer")
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
library(devtools)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
get_demo_data <- function(table, metric, unique_id, qmr_con, datamart){
# SQL Query goes here
std_demo_sql <-
c("with COHORT as
(
select
cohort.smallest_unit as unique_id,
cohort.PAT_KEY,
cohort.VISIT_KEY,
cohort.metric_to_analyze as metric
from table_to_analyze cohort
join CDWUAT..VISIT on cohort.VISIT_KEY = visit.VISIT_KEY
),
demos as
(
select
cohort.PAT_KEY,
census.FIPS,
case when count(distinct race_dict.DICT_NM) > 1 then 'Multi-Racial' else max(race_dict.DICT_NM) end as RACE_RAW,
case when upper(ETHNIC_GRP) <> 'HISPANIC OR LATINO' then
when upper(RACE_RAW) = 'WHITE' then 'NON-HISPANIC WHITE'
when upper(RACE_RAW) = 'BLACK OR AFRICAN AMERICAN' then 'NON-HISPANIC BLACK'
when upper(RACE_RAW) = 'REFUSED' then null
else 'OTHER' end
else 'HISPANIC OR LATINO' end as RACE,
case when pat.LANG is null or pat.LANG = 'ENGLISH' then 'ENGLISH' else 'NON-ENGLISH' end as PRIMARY_LANG
from table_to_analyze cohort
left join CDWUAT..PATIENT_GEOGRAPHICAL_SPATIAL_INFO map on cohort.pat_key = map.pat_key
and map.SEQ_NUM = 0
left join CDWUAT..CENSUS_TRACT CENSUS on map.census_tract_key = census.census_tract_key
left join CDWUAT..PATIENT pat on cohort.pat_key = pat.pat_key
left join CDWUAT..PATIENT_RACE_ETHNICITY race on pat.pat_key = race.pat_key and race.race_ind = 1
left join CDWUAT..CDW_DICTIONARY race_dict on race.dict_race_ethnic_key = race_dict.dict_key
group by
cohort.PAT_KEY,
census.FIPS,
pat.LANG,
pat.ETHNIC_GRP
),
payer as
(
select
cohort.VISIT_KEY,
case when RPT_GRP_10 is null or upper(RPT_GRP_10) not in ('GOVERNMENT', 'COMMERCIAL') then 'OTHER' else RPT_GRP_10 end as PAYER_TYPE
from table_to_analyze cohort
left join CDWUAT..HOSPITAL_ACCOUNT ACCT on cohort.VISIT_KEY = ACCT.PRI_VISIT_KEY
left join CDWUAT..VISIT on cohort.VISIT_KEY = visit.VISIT_KEY
left join CDWUAT..PAYOR on
case when ACCT.PRI_PAYOR_KEY is not null then ACCT.PRI_PAYOR_KEY = PAYOR.PAYOR_KEY
else visit.PAYOR_KEY = payor.PAYOR_KEY end
)
select
cohort.unique_id,
cohort.PAT_KEY,
cohort.VISIT_KEY,
cohort.metric,
demos.race,
demos.primary_lang,
--demos.fips,
payer.payer_type
from COHORT cohort
left join DEMOS on cohort.PAT_KEY = demos.PAT_KEY
left join PAYER on cohort.VISIT_KEY = payer.VISIT_KEY
group by
cohort.unique_id,
cohort.VISIT_KEY,
cohort.PAT_KEY,
cohort.metric,
demos.race,
demos.primary_lang,
payer.payer_type
;"
)
if (datamart) {
# replace table/metric in std sql code, remember ocqi_uat..
sql <-
std_demo_sql %>%
str_replace_all("table_to_analyze", paste0("ocqi_uat..", table)) %>%
str_replace_all("metric_to_analyze", metric) %>%
str_replace_all("smallest_unit", unique_id)
# then run the edited query and assign it to demo data set
}
else {
# write the data frame to qmr_dev: dbwritetable
dbWriteTable(qmr_con, "DEMO_DATA", get(table), overwrite = TRUE)
sql <-
std_demo_sql %>%
str_replace_all("table_to_analyze", paste0("qmr_dev.", Sys.getenv("USERNAME"), ".DEMO_DATA")) %>%
str_replace_all("metric_to_analyze", metric) %>%
str_replace_all("smallest_unit", unique_id)
# then do the same stuff as above, but refer to qmr_dev.. instead of ocqi_uat..
}
writeClipboard(sql)
print("SQL Query was copied to clipboard. Paste into Aginity to run.")
demo_data <- dbGetQuery(qmr_con, sql)
#if(!datamart) {
#  dbRemoveTable(qmr_con, "DEMO_DATA")
#}
demo_data
}
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", qmr_con, datamart = TRUE)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", qmr_con, datamart = TRUE)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", QMR_DEV, datamart = TRUE)
qmr_con <- dbConnect(odbc::odbc(),
dsn = "QMR_DEV",
bigint = "integer")
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", qmr_con, datamart = TRUE)
document()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", qmr_con, datamart = TRUE)
sql <- c("select npo.*, ael.VISIT_KEY, ael.PAT_KEY from OCQI_UAT..FACT_NPO npo
join CDWUAT..anesthesia_encounter_link ael on npo.ANES_KEY = ael.ANES_KEY")
cases <- dbGetQuery(qmr_con, sql)
screen_demos("cases", "NPO_AT_GOAL_IND", "ANES_KEY", qmr_con, datamart = FALSE)
screen_demos(cases, "NPO_AT_GOAL_IND", "ANES_KEY", qmr_con, datamart = FALSE)
screen_demos("cases", "NPO_AT_GOAL_IND", "ANES_KEY", qmr_con, datamart = FALSE)
screen_demos("cases", "NPO_AT_GOAL_IND", "ANES_KEY", qmr_con, datamart = FALSE)
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", qmr_con, datamart = TRUE)
load_all()
screen_demos("FACT_KARABOTS_BREASTFEEDING", "BREASTFED_ONLY_IND", "VISIT_KEY", qmr_con, datamart = TRUE)
screen_demos("cases", "NPO_AT_GOAL_IND", "ANES_KEY", qmr_con, datamart = FALSE)
qmr_con <- dbConnect(odbc::odbc(),
dsn = "QMR_DEV",
bigint = "integer")
?get
dbWriteTable(qmr_con, "DEMO_DATA", cases, overwrite = TRUE)
case_small <- dplyr::select(cases, VISIT_KEY, PAT_KEY, ANES_KEY)
case_small <- dplyr::select(cases, VISIT_KEY, PAT_KEY, ANES_KEY, NPO_AT_GOAL_IND)
dbWriteTable(qmr_con, "DEMO_DATA", case_small, overwrite = TRUE)
load_all()
document()
screen_demos("case_small", "NPO_AT_GOAL_IND", qmr_con, datamart = FALSE)
?geom_text()
make_demo_plot <- function(data, metric, demo){
ggplot(data = filter(data, demo_group == demo), aes(x = reorder(demo_value, -METRIC), y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary" )
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
screen_demos("case_small", "NPO_AT_GOAL_IND", qmr_con, datamart = FALSE)
make_demo_plot <- function(data, metric, demo){
ggplot(data = filter(data, demo_group == demo), aes(x = reorder(demo_value, -METRIC), y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot <- function(data, metric, demo){
ggplot(data = filter(data, demo_group == demo), aes(x = reorder(demo_value, -METRIC), y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
load_all
load_all)
load_all()
screen_demos(table = "FACT_KARABOTS_BREASTFEEDING", metric = "BREASTFED_ONLY_IND", qmr_con = qmr_dev)
screen_demos(table = "FACT_KARABOTS_BREASTFEEDING", metric = "BREASTFED_ONLY_IND", qmr_con)
make_demo_plot <- function(data, metric, demo){
ggplot(data = filter(data, demo_group == demo), aes(x = reorder(demo_value, -METRIC), y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "RACE")
library(ggplot2)
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = reorder(demo_value, -METRIC), y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
library(ggthemes)
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = reorder(demo, -METRIC), y = METRIC)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = reorder(demo, -metric), y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = reorder(demo, -metric), y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
geom_text(stat = "summary", aes(label =  ..count..) ) +
)
geom_text(stat = "summary", aes(label =  ..count..) ) +
)
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
head(mtcars)
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", fun.y = "mean", aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", fun.y = "mean" ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", fun.y = "mean", aes(label = 1) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(aes(y = ..prop..), fill = "#50a0f0", na.rm = TRUE) +
geom_text(aes(label =  ..prop..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
library(scales)
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(aes(y = ..prop..), fill = "#50a0f0", na.rm = TRUE) +
geom_text(aes(label =  ..prop..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
?ggplot2
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric)) +
geom_bar(aes(y = ..count..), fill = "#50a0f0", na.rm = TRUE) +
geom_text(aes(label =  ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data = filter(data, demo_group == demo), aes(x = reorder(demo_value, -METRIC), y = METRIC,
label = 1)) +
geom_bar(stat = "summary", fun.y = "mean", fill = "#50a0f0", na.rm = TRUE) +
geom_text(stat = "summary", fun.y = "mean") +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric,  label = 1)) +
geom_bar(aes(y = ..count..), fill = "#50a0f0", na.rm = TRUE) +
geom_text( ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
make_demo_plot <- function(data, metric, demo){
ggplot(data, aes(x = demo, y = metric,  label = 1)) +
geom_bar(aes(y = ..count..), fill = "#50a0f0", na.rm = TRUE) +
geom_text(aes(y = ..count..) ) +
theme_few() +
labs(x = demo, y = paste("Avg of", metric), title = paste(metric, "stratified by", demo)) +
coord_flip()
}
make_demo_plot(mtcars, "mpg", demo = "cyl")
load_all()
screen_demos("case_small", "NPO_AT_GOAL_IND", qmr_con, datamart = FALSE)
load_all()
document()
